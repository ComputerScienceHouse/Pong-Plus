package code{	import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.ui.Keyboard;	import flash.utils.Timer;	import fl.motion.easing.Back;	public class PongDoc extends MovieClip	{		var player:PongBumper; //Player 1's paddle		var comp:PongBumper2; //Computer/Player 2's paddle		var compSpeed:Number = 3; //Initial "speed" of computer's paddle (single player mode only) (How many pixels it moves every frame)		var DELTA:Number = 8; //The "speed" of the player's paddle (both player 1 and 2)		var playerHit:Boolean = true; //Determines if the ball hit Player 1's paddle last (single player mode only)		var playerCount:int = 0; //Player 2's score		var compCount:int = 0; //Computer/Player 2's paddle		var ball:PongBall; //The ball		var power:PowerUp; //The power-up		var start_button1:PongStartButton; //Start button for single player		var start_button2:PongStartButton2; //Start butotn for multi player		var replay_button:PongReplayButton; //Replay button for after the game		var menu_button:MenuButton; //Menu button for after the game		var inst_button:InstructionsButton; //Button for viewing instrucitons		var back_button:BackButton; //Button to return to the menu from the instructions frame		var obstacle1:PongObstacle; //Obstacle 1 (small paddles)		var obstacle2:PongObstacle2; //Obstacle 2 (small paddles)		var timer:Timer; //Timer for the power-up location		var TIMER_REPS:Number = Math.random() * 12 + 3; //How many "ticks" of the counter before it is complete		var TIMER_DELAY:int = 1000; //The delay of the timer between each "tick"		var leftDownP:Boolean = false; //Determines if Player 1's "left" control key is pressed		var rightDownP:Boolean = false; //Determines if Player 1's "right" control key is pressed		var leftDownC:Boolean = false; //Determines if Player 2's "left" control key is pressed (Multi Player only)		var rightDownC:Boolean = false; //Determines if Player 2's "right" control key is pressed (Multi Player only)		var twoPlayer:Boolean = false; //Determines if game is single player or multi player		var isPaused:Boolean = false; //Determines if the game is paused or running		var pauseCount:int = 0;		var storeSpeedX:Number; //Stores the X speed of the ball when paused		var storeSpeedY:Number; //Stores the Y speed of the ball when paused		var storeCompSpeed:Number; //Stores the speed of the Computer when paused				public function PongDoc() //Document constructor		{			gotoAndStop(1);						timer = new Timer(TIMER_DELAY,TIMER_REPS); //Creates the timer object for the power-up			timer.addEventListener(TimerEvent.TIMER_COMPLETE, onComplete); //Adds listener for when the timer is complete			stage.addEventListener(KeyboardEvent.KEY_DOWN, onDown); //Listens for keys being pressed (controls)			stage.addEventListener(KeyboardEvent.KEY_UP, onUp); //Listens for keys being released			//Create the single player start button object and add it to the stage			start_button1 = new PongStartButton(175,400);			addChild(start_button1);			start_button1.visible = true;			start_button1.addEventListener(MouseEvent.CLICK, onStart1); //Listens for button being clicked			//Create the multi player start button object and add it to the stage			start_button2 = new PongStartButton2(425,400);			addChild(start_button2);			start_button2.visible = true;			start_button2.addEventListener(MouseEvent.CLICK, onStart2);			//Create the replay button object and add it to the stage			replay_button = new PongReplayButton(300,375);			addChild(replay_button);			replay_button.visible = false; //Turns visibility off, since it isn't needed yet			replay_button.addEventListener(MouseEvent.CLICK, onReplay);						//Create the menu button object and add it to the stage			menu_button = new MenuButton(300,500);			addChild(menu_button);			menu_button.visible = false;			menu_button.addEventListener(MouseEvent.CLICK, onMenu);			//Create the instructions button object and add it to the stage			inst_button = new InstructionsButton(300,250);			addChild(inst_button);			inst_button.visible = true;			inst_button.addEventListener(MouseEvent.CLICK, onInst);						//Create the back button object and add it to the stage			back_button = new BackButton(485,715);			addChild(back_button);			back_button.visible = false;			back_button.addEventListener(MouseEvent.CLICK, onBack);			//Create the objects for the two paddles and add them to the stage			player = new PongBumper();			comp = new PongBumper2();			//Create objects for the ball, power-up and add them to the stage			ball = new PongBall(500,1);			power = new PowerUp();			addChild(power);			power.visible = false;			//Create objects for the obstacles			obstacle1 = new PongObstacle(100,275);			obstacle2 = new PongObstacle2(500,475);						//Set score text boxes to invisible			playerScore.visible = false;			compScore.visible = false;		}		public function onComplete(e:TimerEvent) //Handles the event when the timer is complete		{			if (currentFrame == 98) //Happens only during gameplay			{				//Makes power visible, appear at random location				power.visible = true;				power.x = Math.random() * 560 + 20;				power.y = Math.random() * 350 + 150;			}		}		public function onStart1(e:MouseEvent) //Handles the event when single player start button is clicked		{			play(); //Plays the timeline			addChild(player); //Adds paddles			addChild(comp);			player.visible = true;			comp.visible = true;			player.x = 300;			comp.x = 300;			start_button1.visible = false; //Hides buttons			start_button2.visible = false;			inst_button.visible = false;			addEventListener(Event.ENTER_FRAME, onEnter); //Listens for a frame change on the timeline (animation)			ball.speedX = ball.speedXInit;			ball.speedY = ball.speedYInit;		}		public function onStart2(e:MouseEvent) //Handles the event when multi player start button is clicked		{			play(); //Plays the timeline			addChild(player); //Adds paddles			addChild(comp);			player.x = 300;			comp.x = 300;			player.visible = true;			comp.visible = true;			start_button1.visible = false; //Hides buttons			start_button2.visible = false;			inst_button.visible = false;			twoPlayer = true; //Sets multi player mode to true			addEventListener(Event.ENTER_FRAME, onEnter); //Listens for a frame change on the timeline (animation)			isPaused = false;		}		public function onReplay(e:MouseEvent) //Handles the event when the replay button is clicked		{			replay_button.visible = false; //Hides buttons			menu_button.visible = false;			playerCount = 0; //Resets scores			compCount = 0;			playerScore.gotoAndStop(1);			compScore.gotoAndStop(1);			playerScore.visible = false;			compScore.visible = false;			power.visible = false; //Resets power up conditions			timer.reset();			gotoAndPlay(2); //Plays countdown animation			obstacle1.visible = false;			obstacle2.visible = false;		}		public function onMenu(e:MouseEvent) //Handles the event when the menu button is clicked		{			resetAll();		}		public function onInst(e:MouseEvent) //Handles the event when the instruction button is clicked		{			gotoAndStop(101); //Go to correct frame			back_button.visible = true; //Shows "back" butotn			inst_button.visible = false; //Hides buttons			start_button1.visible = false;			start_button2.visible = false;		}		//Event handler for the back button		public function onBack(e:MouseEvent)		{			gotoAndStop(1);			start_button1.visible = true;			start_button2.visible = true;			inst_button.visible = true;			back_button.visible = false;		}		public function onEnter(e:Event) //Fires every frame that is passed		{			if (currentFrame == 97) //On frame 97... (just before the round "starts")			{				timer.reset(); //Reset power-up timer				timer.start(); 				addChild(ball); //Adds the ball to the stage				ball.x = 300;				ball.y = 375;				ball.upOrDown(); //Determine starting direction of the ball				ball.speedY = ball.speedYInit * ball.direc; //Sets the inital ball X and Y speeds				ball.speedX = ball.speedXInit;				player.gotoAndStop(1); //Sets paddles to proper frame 				comp.gotoAndStop(1);				playerHit = true;			}			if (currentFrame == 98) //On frame 98... (the frame that contains the round)			{				//Player 1 Motion controls				if (leftDownP == true) //Move the paddle left				{					player.x -=  DELTA;				}				if (rightDownP == true) //Move the paddle right				{					player.x +=  DELTA;				}				//Make the ball bounce off the walls				if (ball.x - ball.width / 2 + ball.speedX < 0 || ball.x + ball.width / 2 > 600)				{					ball.speedX =  -  ball.speedX;				}				//Glitch Fixing				if (ball.hitTestObject(player.body)) //Prevent the ball from passing through the paddles				{					ball.y -=  50;					ball.speedX =  -  ball.speedX;					ball.speedY =  -  ball.speedY;				}				if (ball.hitTestObject(comp.body))				{					ball.y +=  50;					ball.speedX =  -  ball.speedX;					ball.speedY =  -  ball.speedY;				}				if (ball.x < -50 || ball.x > 800) //Keep the ball on the field				{					ballReset();				}				//Ball and Player 1 hit tests (bouncing off the front)				if (ball.hitTestObject(player.front) == true)				{					ball.speedY =  -  ball.speedY; //Make the ball bounce					playerHit = true; //Shows player hit the ball last					if (ball.speedY < ball.maxSpeed && ball.speedY > 0) //Tweak the ball's Y speed slightly and check if it exceeds the maximum					{						ball.speedY +=  ball.accel;					}					if (ball.speedY >  -  ball.maxSpeed && ball.speedY < 0)					{						ball.speedY -=  ball.accel;					}					if (ball.x > player.center.x) // Tweak the ball's angle slightly					{						if (ball.speedX <= 0)						{							ball.speedX -=  Math.random()*1.5;						}						if (ball.speedX > 0)						{							ball.speedX +=  Math.random()*1.5;						}					}					if (ball.x < player.center.x)					{						if (ball.speedX <= 0)						{							ball.speedX +=  Math.random()*1.5;						}						if (ball.speedX > 0)						{							ball.speedX -=  Math.random()*1.5;						}					}				}				//Ball and Player 1 side hit tests (bouncing off the sides)				if (ball.hitTestObject(player.sideL) && ball.speedX > 0) //Make the ball bounce off the paddle				{					ball.speedX =  -  ball.speedX;				}				if (ball.hitTestObject(player.sideR) && ball.speedX < 0)				{					ball.speedX =  -  ball.speedX;				}				//Ball and Player 2/Computer side hit tests (bouncing off the sides)				if (ball.hitTestObject(comp.sideL) && ball.speedX > 0)				{					ball.speedX =  -  ball.speedX;				}				if (ball.hitTestObject(comp.sideR) && ball.speedX < 0)				{					ball.speedX =  -  ball.speedX;				}				//Ball and Player 2/Computer hit test (bouncing off the front)				if (ball.hitTestObject(comp.front) == true)				{					ball.speedY =  -  ball.speedY; //Chang the ball's direction					playerHit = false; //Show the computer hit the ball last					if (ball.speedY < ball.maxSpeed && ball.speedY > 0) //Tweak the ball's speed likely					{						ball.speedY +=  ball.accel;					}					if (ball.speedY >  -  ball.maxSpeed && ball.speedY < 0)					{						ball.speedY -=  ball.accel;					}					if (ball.x > comp.center.x) // Tweak the ball's angle slightly					{						if (ball.speedX <= 0)						{							ball.speedX -=  Math.random()*1.5;						}						if (ball.speedX > 0)						{							ball.speedX +=  Math.random()*1.5;						}					}					if (ball.x < comp.center.x)					{						if (ball.speedX <= 0)						{							ball.speedX +=  Math.random()*1.5;						}						if (ball.speedX > 0)						{							ball.speedX -=  Math.random()*1.5;						}					}				}				//Check if a player has scored				if (ball.y - .5*(ball.height) <= 0) //If Player 1 scores				{					playerScore.visible = true;					playerCount++; //Increase the score					playerScore.gotoAndStop(playerCount);					compSpeed += .3; //Make the computer move faster (single player mode)					ball.remove(); //Temporarily remove the ball					timer.reset(); //Reset the power-up timer					gotoAndPlay(2); //Reset the round				}				if (ball.y + .5*(ball.height) >= stage.stageHeight) //If Player 2/Computer scores				{					compScore.visible = true;					compCount++; //Increase the score					compScore.gotoAndStop(compCount);					ball.remove(); //Temporarily remove the ball					timer.reset(); //Reset the power-up timer					gotoAndPlay(2); //Reset the round				}				//If the ball hits the power up and player 1 hit the ball last...				if (ball.hitTestObject(power) == true && power.visible == true && playerHit == true)				{					if (power.currentFrame == 1)					{						player.gotoAndStop(2); //Big paddle					}					if (power.currentFrame == 2)					{						player.gotoAndStop(3); //Small paddle					}					if (power.currentFrame == 3)					{						ball.speedY = ball.speedY * 2; //Fast Ball						ball.speedX = ball.speedX * 2;					}					if (power.currentFrame == 4)					{						ball.speedY = ball.speedY / 2; //Slow Ball						ball.speedX = ball.speedX / 1.5;					}					powerReset(); //Reset the power-up				}				//If the ball hits the power up and player 2 hit the ball last...				if (ball.hitTestObject(power) == true && power.visible == true && playerHit == false)				{					if (power.currentFrame == 1)					{						comp.gotoAndStop(2); //Big paddle					}					if (power.currentFrame == 2)					{						comp.gotoAndStop(3); //Small paddle					}					if (power.currentFrame == 3)					{						ball.speedY = ball.speedY * 2; //Fast ball						ball.speedX = ball.speedX * 2;					}					if (power.currentFrame == 4)					{						ball.speedY = ball.speedY / 2; //Slow ball						ball.speedX = ball.speedX / 1.5;					}					powerReset(); //Reset the power-up				}				//Keeping the ball's speed controlled				if (ball.speedY > ball.maxSpeed)				{					ball.speedY = ball.maxSpeed;				}				//Computer "AI"				if (twoPlayer == false) //For single player mode...				{					if (playerHit == true) //If the player hit the ball last, move the paddle					{						if (ball.x > comp.x)						{							comp.x +=  compSpeed;						}						if (ball.x < comp.x)						{							comp.x -=  compSpeed;						}					}					if (playerHit == false) //If the computer hit the paddle last, do nothing					{					}				}				//Player 2 motion				if (twoPlayer == true) //For multi player mode...				{					if (leftDownC == true) //Move left					{						comp.x -=  DELTA;					}					if (rightDownC == true) //Move right					{						comp.x +=  DELTA;					}				}			}			//Checking for a winner			if (playerScore.currentFrame == 10) //If Player 1 wins			{				gotoAndStop(99); //Go to win screen				ball.remove(); //Remove/add necessary stage elements				obstacle1.visible = false;				obstacle2.visible = false;				replay_button.visible = true;				menu_button.visible = true;				power.visible = false;			}			if (compScore.currentFrame == 10) //If Player 2/Computer wins			{				gotoAndStop(100); //Go to win screen				ball.remove(); //Remove/add necessary stage elements				obstacle1.visible = false;				obstacle2.visible = false;				power.visible = false;				replay_button.visible = true;				menu_button.visible = true;			}			//Adding the first obstacle (when 5 points are scored)			if (playerScore.currentFrame >= 5 || (twoPlayer == true && compScore.currentFrame >= 8))			{				addChild(obstacle1);				//Make the ball bounce off the obstacle				if (ball.hitTestObject(obstacle1.front) || ball.hitTestObject(obstacle1.back))				{					ball.speedY =  -  ball.speedY;					//Make sure the computer still follows the ball					if (playerHit == false)					{						playerHit = true;					}				}				if (ball.hitTestObject(obstacle1.sideR) && ball.speedX < 0)				{					ball.speedX =  -  ball.speedX;				}				if (ball.hitTestObject(obstacle1.sideL) && ball.speedX > 0)				{					ball.speedX =  -  ball.speedX;				}			}			//Adding the second obstacle (when 8 points are scored)			if (playerScore.currentFrame >= 8 || (twoPlayer == true && compScore.currentFrame >= 5))			{				addChild(obstacle2);				//Make the ball bounce off the obstacle				if (ball.hitTestObject(obstacle2.front) || ball.hitTestObject(obstacle2.back))				{					ball.speedY =  -  ball.speedY;					//Make sure the computer still follows the ball					if (playerHit == false)					{						playerHit = true;					}				}				if (ball.hitTestObject(obstacle2.sideR) && ball.speedX < 0)				{					ball.speedX =  -  ball.speedX;				}				if (ball.hitTestObject(obstacle2.sideL) && ball.speedX > 0)				{					ball.speedX =  -  ball.speedX;				}			}		}		//Reseting the power-up		public function powerReset()		{			power.gotoAndPlay(Math.round(Math.random()*4)); //Play random frame			power.visible = false; //Hide it			timer.reset(); //Reset the timer			timer.start();		}		//Reseting the ball (position and speed) in case of a glitch		public function ballReset()		{			ball.x = 300;			ball.y = 375;			ball.speedX = ball.speedXInit;			ball.speedY = ball.speedYInit;		}		//Reseting the game		public function resetAll()		{			replay_button.visible = false; //Hides buttons			menu_button.visible = false;			player.visible = false;			player.gotoAndStop(1);			comp.visible = false;			comp.gotoAndStop(1);			start_button1.visible = true;			start_button2.visible = true;			inst_button.visible = true;			playerCount = 0; //Resets scores			compCount = 0;			playerScore.gotoAndStop(1);			compScore.gotoAndStop(1);			playerScore.visible = false;			compScore.visible = false;			power.visible = false; //Resets power up conditions			timer.stop();			gotoAndStop(1); //Plays countdown animation			ball.remove();			obstacle1.remove1();			obstacle2.remove2();		}		//Event handler for keys being pressed		public function onDown(e:KeyboardEvent)		{			//Paddle motion			if (e.keyCode == Keyboard.LEFT && isPaused == false) //Moving player 1 left			{				leftDownP = true;			}			if (e.keyCode == Keyboard.RIGHT && isPaused == false) //Moving player 1 right			{				rightDownP = true;			}			if (e.keyCode == Keyboard.A && isPaused == false) //Moving player 2 left			{				leftDownC = true;			}			if (e.keyCode == Keyboard.D && isPaused == false) //Moving player 2 right			{				rightDownC = true;			}			//Emergency ball reset button			if (e.keyCode == Keyboard.SPACE && isPaused == false)			{				if (ball.y < player.y - 5 || ball.y > comp.y + 5)				{					ballReset();				}			}			//Pause the game			if (e.keyCode == Keyboard.P)			{				pauseCount ++;				if (pauseCount == 1)				{					removeEventListener(Event.ENTER_FRAME, onEnter); //Remove enter frame listener to stop most animations					isPaused = true; //Shows game is paused to stop certain keyboard inputs					storeSpeedX = ball.speedX; //Store ball speed values					storeSpeedY = ball.speedY;					ball.speedX = 0; //Stop the ball and obstacles					ball.speedY = 0; 					obstacle1.spd = 0;					obstacle2.spd = 0;					timer.stop(); //Pause the power-up timer				}				else				{									}			}			//Resume the game			if (e.keyCode == Keyboard.O && isPaused == true)			{				pauseCount = 1;				if (pauseCount == 1)				{					addEventListener(Event.ENTER_FRAME, onEnter); //Add back the enter frame listener to resume animation					isPaused = false; //Show game isn't paused					ball.speedX = storeSpeedX; //Return the ball and obstacle to proper speeds					ball.speedY = storeSpeedY;					obstacle1.spd = 1;					obstacle2.spd = 1;					timer.start(); //Start the timer again				}				pauseCount = 0;			}			//Go to the menu			if (e.keyCode == Keyboard.M)			{				resetAll();			}		}		//Event handler for keys being released		public function onUp(e:KeyboardEvent)		{			//Stop paddle motion			if (e.keyCode == Keyboard.LEFT)			{				leftDownP = false;			}			if (e.keyCode == Keyboard.RIGHT)			{				rightDownP = false;			}			if (e.keyCode == Keyboard.A)			{				leftDownC = false;			}			if (e.keyCode == Keyboard.D)			{				rightDownC = false;			}		}	}}